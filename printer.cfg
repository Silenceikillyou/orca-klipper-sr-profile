[mcu]
#ls /dev/serial/by-id/*
serial: /dev/serial/by-id/usb-Klipper_stm32f407xx_350056001951303330383638-if00

[temperature_sensor ODROID_C4]
sensor_type: temperature_host
min_temp: 0
max_temp: 100


[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100

[stepper_a]
step_pin: PE3
dir_pin: PE2 
enable_pin: !PE4
microsteps: 16
rotation_distance: 40   
endstop_pin: PA15 #X-Min, PE4:X-Max
position_endstop: 333.7
homing_speed: 40
#arm_length = 315

[stepper_b]
step_pin: PE0
dir_pin: PB9   
enable_pin: !PE1
microsteps: 16
rotation_distance: 40
endstop_pin: PD2  #Y-Min, PJ0:Y-Max
position_endstop: 333.7
#arm_length = 315

[stepper_c]
step_pin: PB5
dir_pin: PB4   
enable_pin: !PB8
microsteps: 16
rotation_distance: 40
endstop_pin: PC4  #Z-Min, PD2:Z-Max
position_endstop: 333.7
#arm_length = 315

[extruder]
step_pin: PD6
dir_pin: !PD3
enable_pin: !PB3
microsteps: 16
rotation_distance: 8.64
nozzle_diameter: 0.4
filament_diameter: 1.750
heater_pin: PE5
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC1
min_temp: -5
max_temp: 270
pressure_advance: 0.4
pressure_advance_smooth_time: 0.08
#control = pid
#pid_kp = 13.70
#pid_ki = 0.48
#pid_kd = 70.22
max_extrude_cross_section: 110 
max_extrude_only_distance: 1100
min_extrude_temp: 185
instantaneous_corner_velocity: 0.950
#[extruder1]
#step_pin: PC1
#dir_pin: !PC3
#enable_pin: !PC7
#heater_pin: PH4
#sensor_pin: PK7
#...

[heater_bed]
heater_pin: PA0
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC0
min_temp: 0
max_temp: 115
#control = pid
#pid_kp = 111.12
#pid_ki = 22.05
#pid_kd = 373.36


[mcu odroid]
serial: /tmp/klipper_host_mcu

[adxl345]
cs_pin: odroid:None

[resonance_tester]
accel_chip: adxl345
probe_points:
    0, 0, 20  # an example


[input_shaper]
shaper_freq_x: 40.6
shaper_type_x: ei
shaper_freq_y: 47.4
shaper_type_y: ei


[printer]
kinematics: delta
max_velocity: 300 
max_accel: 10000 
max_accel_to_decel: 3000  
square_corner_velocity: 15.0
max_z_velocity: 300 
#delta_radius: 150
print_radius: 132
minimum_z_position=-5 

[gcode_button kill_switch]
pin: odroid:gpiochip1/gpio23
press_gcode: M112

[virtual_sdcard]
path: /home/admin/printer_data/gcodes

[delta_calibrate]
radius: 130
horizontal_move_z: 50
Speed: 20

[fan]
pin: PC14

[heater_fan heat_sink_fan]
pin: PB0
heater_temp: 50.0

[probe] 
pin: !PC8
x_offset: 0
y_offset: 0
#z_offset: 16.705
speed: 20
samples: 5
samples_result: average
sample_retract_dist: 10
samples_tolerance: 0.025
samples_tolerance_retries: 7

[bed_mesh]  
speed: 50 
horizontal_move_z: 25 
mesh_radius: 125  
mesh_origin: 0,0  
round_probe_count: 7
zero_reference_position: 0,0
algorithm: bicubic

[filament_switch_sensor filament_sensor]  
pause_on_runout: True
runout_gcode: PAUSE 
switch_pin: PA4

[pause_resume]

[include timelapse.cfg]

[endstop_phase]

[endstop_phase stepper_a]
#endstop_accuracy:
#trigger_phase:
endstop_align_zero: false

[endstop_phase stepper_b]
#endstop_accuracy:
#trigger_phase:
endstop_align_zero: false

[endstop_phase stepper_c]
#endstop_accuracy:
#trigger_phase:
endstop_align_zero: false 

[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}

[respond]

[manual_stepper stepper_u]
step_pin:PD15
dir_pin:PA1
enable_pin:!PA3
microsteps:16
rotation_distance:40
#velocity:  The default is 5mm/s.
accel:500
endstop_pin:PE7
#   Endstop switch detection pin. If specified, then one may perform
#   "homing moves" by adding a STOP_ON_ENDSTOP parameter to
#   MANUAL_STEPPER movement commands.

[gcode_macro startDG]
VARIABLE_zetko: 0.0
gcode:
  SET_GCODE_VARIABLE MACRO=startDG VARIABLE=zetko VALUE=450
  UPDATE_DELAYED_GCODE ID=get_coordinates DURATION=1

[gcode_macro stopDG]
gcode:
  UPDATE_DELAYED_GCODE ID=get_coordinates DURATION=0


[delayed_gcode get_coordinates]
initial_duration: 0.0
gcode:
  {% set x2 = 100|int %}  #placeholder
  {% set y2 = 50|int %}   #placeholder
  {% set z2 = printer['gcode_macro startDG'].zetko|float %}  #placeholder
  {% set v1 = 161.83015788165073|float %}
  {% set x1 = printer.toolhead.position.x|default(0)|int %}
  {% set y1 = printer.toolhead.position.y|default(0)|int %}
  {% set z1 = printer.toolhead.position.z|default(333)|int %}
  {% set u1 = ((x2 - x1)**2 + (y2 - y1)**2 + (z2 - z1)**2)**(1/2) %}
  RESPOND MSG="{u1}"
  {% if u1 != v1 %}
    {% set v2 = v1 - u1|float %}
    RESPOND MSG="moving {v2}"
    MANUAL_STEPPER STEPPER=stepper_u SET_POSITION=0
    MANUAL_STEPPER STEPPER=stepper_u MOVE={v2} SPEED=10 #SYNC=0
    RESPOND MSG="{printer['gcode_macro startDG'].zetko}"
    SET_GCODE_VARIABLE MACRO=startDG VARIABLE=zetko VALUE={z2+v2|float}
  {% endif %}
  UPDATE_DELAYED_GCODE ID=get_coordinates DURATION=0.5

#[auto_stepper]
#x:100
#y:50
#z:450
#default:161.83015788165073
#ON:0

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+6}   ; Wait for hotend temp (within 5 degrees)
    {% endif %}


[gcode_macro PAUSE] 
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(0) %}      #edit to your park position
    {% set y = params.Y|default(0) %}      #edit to your park position
    {% set z = params.Z|default(25)|float %} #edit to your park position
    {% set e = params.E|default(6) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}    
      G1 Z{z_safe}
      G90
      G1 X{x} Y{y} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}

[gcode_macro RESUME]  
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### set defaults #####
    {% if printer["filament_switch_sensor filament_sensor"].filament_detected == True %} 
      {% set e = params.E|default(6) %} #edit to your retract length
    #### get VELOCITY parameter if specified ####
      {% if 'VELOCITY' in params|upper %}
        {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
      {%else %}
        {% set get_params = "" %}
      {% endif %}
    ##### end of definitions #####
      G91
      {% if printer.extruder.can_extrude|lower == 'true' %}
        G1 E{e} F2100
      {% else %}
        {action_respond_info("Extruder not hot enough")}
      {% endif %}   
      RESUME_BASE {get_params}
    {% endif %} 

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE
  G28


[gcode_macro UNLOAD_FILAMENT] #unload filament
gcode:
    G91
    G1 E20 F100
    G1 E-500 F400
    G90

[gcode_macro LOAD_FILAMENT] #load filament
gcode:
    G91
    G1 E400 F350
    G1 E50 F100
    G90

[save_variables]
filename: ~/savedVariables1.cfg

[gcode_macro SET_GCODE_OFFSET]
rename_existing: _SET_GCODE_OFFSET
gcode:
    {% if printer.save_variables.variables.gcode_offsets %}
        {% set offsets = printer.save_variables.variables.gcode_offsets %}
    {% else %} 
        {% set offsets = {'x': None,'y': None,'z': None} %}
    {% endif %}
    
    {% set ns = namespace(offsets={'x': offsets.x,'y': offsets.y,'z': offsets.z}) %}
    
    _SET_GCODE_OFFSET {% for p in params %}{'%s=%s '% (p, params[p])}{% endfor %}

    {%if 'X' in params %}{% set null = ns.offsets.update({'x': params.X}) %}{% endif %}
    {%if 'Y' in params %}{% set null = ns.offsets.update({'y': params.Y}) %}{% endif %}
    {%if 'Z' in params %}{% set null = ns.offsets.update({'z': params.Z}) %}{% endif %}
    {%if 'Z_ADJUST' in params %}
        {%if ns.offsets.z == None %}{% set null = ns.offsets.update({'z': 0}) %}{% endif %}
        {% set null = ns.offsets.update({'z': (ns.offsets.z | float) + (params.Z_ADJUST | float)}) %}
    {% endif %}
    SAVE_VARIABLE VARIABLE=gcode_offsets VALUE="{ns.offsets}"

[delayed_gcode LOAD_GCODE_OFFSETS]
initial_duration: 2
gcode:  
    {% if printer.save_variables.variables.gcode_offsets %}
        {% set offsets = printer.save_variables.variables.gcode_offsets %}

        _SET_GCODE_OFFSET {% for axis, offset in offsets.items() if offsets[axis] %}{ "%s=%s " % (axis, offset) }{% endfor %}

        { action_respond_info("Loaded gcode offsets from saved variables [%s]" % (offsets)) }
    {% endif %}|
    
[gcode_arcs]
resolution: 0.75

[gcode_macro bed_delta_calibrate]
gcode:
  SET_GCODE_OFFSET Z=0
  G28
  delta_calibrate
  G1 X0 Y0 Z50 F4200
  G28
  save_config

[gcode_macro bed_level_mesh]
gcode:
  G28
  G1 X0 Y0 Z50 F4200
  bed_mesh_calibrate
  G1 X0 Y0 Z50 F4200
  G28
  save_config

[idle_timeout]
gcode:
#   A list of G-Code commands to execute on an idle timeout. See
#   docs/Command_Templates.md for G-Code format. The default is to run
#   "TURN_OFF_HEATERS" and "M84".
timeout: 600
#   Idle time (in seconds) to wait before running the above G-Code
#   commands. The default is 600 seconds.

########################################
# TMC UART configuration
########################################
[tmc2209 manual_stepper stepper_u]
uart_pin: PD8
interpolate: True
run_current: 0.7
hold_current: 0.2
stealthchop_threshold: 9999

[tmc2209 stepper_a]
uart_pin: PD5
run_current: 1.2
hold_current: 0.5
stealthchop_threshold: 999999
driver_PWM_GRAD: 14
#sense_resistor: 0.110
#interpolate: True
#diag_pin: ^PE5      # Set to MCU pin connected to TMC DIAG pin
#driver_SGTHRS: 60   # 255 is most sensitive value, 0 is least sensitiv      # Set to MCU pin connected to TMC DIAG pin


[tmc2209 stepper_b]
uart_pin: PD7
run_current: 1.2
hold_current: 0.5
stealthchop_threshold: 999999
driver_PWM_GRAD: 14
#sense_resistor: 0.110
#interpolate: True
#diag_pin: ^PJ1      # Set to MCU pin connected to TMC DIAG pin
#driver_SGTHRS: 60  # 255 is most sensitive value, 0 is least sensitiv

[tmc2209 stepper_c]
uart_pin: PD4
#interpolate: True
run_current: 1.22
hold_current: 0.5
driver_PWM_GRAD: 14
#sense_resistor: 0.110
stealthchop_threshold: 999999
#diag_pin: ^PD2     # Set to MCU pin connected to TMC DIAG pin
#driver_SGTHRS: 255  # 255 is most sensitive value, 0 is least sensitiv

[tmc2209 extruder]
uart_pin: PD9
#interpolate: True
run_current: 1.125
hold_current: 0.5
#sense_resistor: 0.110
stealthchop_threshold: 999999




[include fluidd.cfg]


########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PC0, EXP1_3=PH0, EXP1_5=PA1, EXP1_7=PA5, EXP1_9=<GND>,
    EXP1_2=PC2, EXP1_4=PH1, EXP1_6=PA3, EXP1_8=PA7, EXP1_10=<5V>,
    # EXP2 header
    EXP2_1=PB3, EXP2_3=PC6, EXP2_5=PC4, EXP2_7=PL0,  EXP2_9=<GND>,
    EXP2_2=PB1, EXP2_4=PB0, EXP2_6=PB2, EXP2_8=PG0, EXP2_10=<NC>
    # Pins EXP2_1, EXP2_6, EXP2_2 are also MISO, MOSI, SCK of bus "ssp1"
# See the MKS Lcd Config path file for definitions of common LCD displays.
#[include mks_lcd_12864.cfg]




[display_status]

#[bltouch]
#sensor_pin: ^PD2
#control_pin:PB5
#x_offset: -44
#y_offset: -14
#z_offset: 3.099
#speed: 10.0
#samples: 2
#samples_result: median
#sample_retract_dist: 3.0
#samples_tolerance: 0.05
#samples_tolerance_retries: 1

#[safe_z_home]
#home_xy_position: 100,100 # Change coordinates to the center of your print bed
#speed: 50
#z_hop: 5                 # Move up 10mm
#z_hop_speed: 5


#[gcode_macro G29]
#gcode:
#    BED_MESH_CLEAR
#    G28
#    BED_MESH_CALIBRATE
#    BED_MESH_PROFILE SAVE=name
#    SAVE_CONFIG
#    BED_MESH_PROFILE LOAD=name

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [printer]
#*# delta_radius = 151.685272
#*#
#*# [stepper_a]
#*# angle = 210.074378
#*# arm_length = 315.000000
#*#
#*# [stepper_b]
#*# angle = 330.488090
#*# arm_length = 315.000000
#*#
#*# [stepper_c]
#*# angle = 90.000000
#*# arm_length = 315.000000
#*#
#*# [probe]
#*# z_offset = 20.925
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 15.664
#*# pid_ki = 0.385
#*# pid_kd = 159.186
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 69.011
#*# pid_ki = 1.570
#*# pid_kd = 758.254
#*#
#*# [endstop_phase stepper_a]
#*# trigger_phase = 47/64
#*#
#*# [bed_mesh default1]
#*# version = 1
#*# points =
#*# 	0.038598, 0.038598, 0.038598, 0.038598, 0.038598, 0.038598, 0.038598
#*# 	-0.081549, -0.081549, -0.039069, 0.020205, -0.008914, 0.028643, 0.028643
#*# 	-0.008813, -0.008813, -0.021031, -0.014888, -0.002604, -0.029699, -0.029699
#*# 	0.042701, 0.045353, 0.018108, 0.000000, -0.026150, -0.032507, -0.015218
#*# 	0.043367, 0.043367, 0.013233, -0.004498, 0.048332, 0.000744, 0.000744
#*# 	-0.010719, -0.010719, -0.020970, -0.008567, 0.005589, 0.066247, 0.066247
#*# 	-0.031486, -0.031486, -0.031486, -0.031486, -0.031486, -0.031486, -0.031486
#*# min_x = -124.98
#*# max_x = 124.98
#*# min_y = -124.98
#*# max_y = 124.98
#*# x_count = 7
#*# y_count = 7
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*#
#*# [bed_mesh default2]
#*# version = 1
#*# points =
#*# 	-0.020967, -0.020967, -0.020967, -0.020967, -0.020967, -0.020967, -0.020967
#*# 	-0.338847, -0.338847, -0.216585, -0.048929, 0.081172, 0.198608, 0.198608
#*# 	-0.253406, -0.253406, -0.138902, -0.016883, 0.110040, 0.186987, 0.186987
#*# 	-0.227561, -0.149386, -0.043809, 0.000000, 0.134301, 0.226024, 0.295662
#*# 	-0.056707, -0.056707, -0.010695, 0.092704, 0.228765, 0.284744, 0.284744
#*# 	-0.060640, -0.060640, 0.046614, 0.132273, 0.243900, 0.348135, 0.348135
#*# 	0.165456, 0.165456, 0.165456, 0.165456, 0.165456, 0.165456, 0.165456
#*# min_x = -124.98
#*# max_x = 124.98
#*# min_y = -124.98
#*# max_y = 124.98
#*# x_count = 7
#*# y_count = 7
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*#
#*# [delta_calibrate]
#*# height0 = 17.424
#*# height0_pos = 25339.600,25339.600,25339.600
#*# height1 = 17.424
#*# height1_pos = 30973.200,30948.400,22325.200
#*# height2 = 17.424
#*# height2_pos = 24773.600,34301.400,24783.600
#*# height3 = 17.424
#*# height3_pos = 22465.400,30096.400,30063.400
#*# height4 = 17.424
#*# height4_pos = 24558.400,24571.400,31360.400
#*# height5 = 17.424
#*# height5_pos = 29189.800,22581.600,29179.600
#*# height6 = 17.424
#*# height6_pos = 32687.400,24585.600,24608.600
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.088259, 0.088259, 0.088259, 0.088259, 0.088259, 0.088259, 0.088259
#*# 	  -0.271889, -0.271889, -0.145316, 0.025568, 0.163630, 0.296539, 0.296539
#*# 	  -0.230141, -0.230141, -0.096269, 0.022985, 0.154916, 0.221793, 0.221793
#*# 	  -0.268204, -0.168293, -0.070162, 0.000000, 0.128496, 0.223784, 0.325281
#*# 	  -0.145229, -0.145229, -0.071331, 0.025851, 0.156487, 0.234425, 0.234425
#*# 	  -0.153753, -0.153753, -0.063324, 0.025441, 0.141159, 0.265799, 0.265799
#*# 	  0.040077, 0.040077, 0.040077, 0.040077, 0.040077, 0.040077, 0.040077
#*# x_count = 7
#*# y_count = 7
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = -124.98
#*# max_x = 124.98
#*# min_y = -124.98
#*# max_y = 124.98
